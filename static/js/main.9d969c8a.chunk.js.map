{"version":3,"sources":["state/Store.tsx","hooks/useLocalStorage.ts","state/useStore.tsx","layout/User.tsx","layout/Message.tsx","layout/ChatWindow.tsx","chat/useChat.tsx","hooks/useBttvChannelEmotes.ts","hooks/useFullscreen.tsx","layout/Menu.tsx","variables/colors.ts","App.tsx","index.tsx"],"names":["defaultContext","state","chatClient","ChatClient","connection","type","secure","settings","direction","first","second","splitPercentage","queryCache","QueryCache","setState","setSettings","store","createContext","Provider","StateProvider","children","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","useStore","useContext","UserContainer","styled","div","props","color","User","displayName","MessageContainer","Emote","img","Message","React","memo","replaced","message","thirdPartyEmotes","renderMessage","buffer","x","messageText","length","c","emotes","emote","startIndex","push","alt","code","src","id","endIndex","emoteFound","trim","urls","small","colorRaw","ChatWindowContainer","MessageScroll","ul","ChatWindow","channel","ChannelChatWindow","EmptyChatWindow","messages","bufferSize","setMessages","handleMessage","useCallback","channelName","newMessages","pop","unshift","useEffect","join","on","removeListener","useChat","channelId","channelID","useQuery","Promise","resolve","sharedEmotes","channelEmotes","fetch","then","res","json","isLoading","data","channelEmote","medium","big","useBttvChannelEmotes","map","messageID","isFullScreenElement","el","Boolean","document","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","MenuContainer","Menu","element","initialState","fullScreen","setFullScreen","handleChange","addEventListener","removeEventListener","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","useFullScreen","body","toggleFullscreen","icon","onClick","colors","AppContainer","App","connect","className","Classes","DARK","renderTile","path","createNode","prompt","title","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9d969c8a.chunk.js","sourcesContent":["import { ChatClient } from \"dank-twitch-irc\";\nimport React, { createContext, useState } from \"react\";\nimport { MosaicParent } from \"react-mosaic-component\";\nimport { QueryCache } from \"react-query\";\nimport { useLocalStorage } from \"../hooks/useLocalStorage\";\n\nexport interface State {\n\tchatClient: ChatClient,\n\tsettings: MosaicParent<string>,\n\tqueryCache: QueryCache,\n}\n\nexport type Action = Record<string, unknown>;\n\nconst defaultContext = {\n\tstate: {\n\t\tchatClient: new ChatClient({\n\t\t\tconnection: {\n\t\t\t\ttype: \"websocket\",\n\t\t\t\tsecure: true,\n\t\t\t}\n\t\t}),\n\t\tsettings: {\n\t\t\tdirection: \"row\",\n\t\t\tfirst: \"nymn\",\n\t\t\tsecond: {\n\t\t\t\tdirection: \"column\",\n\t\t\t\tfirst: \"pokimane\",\n\t\t\t\tsecond: \"pajlada\",\n\t\t\t},\n\t\t\tsplitPercentage: 40,\n\t\t} as MosaicParent<string>,\n\t\tqueryCache: new QueryCache(),\n\t},\n\tsetState: (state: State) => {\n\t\t// do nothing\n\t},\n\tsetSettings: (settings: MosaicParent<string>) => {\n\t\t// do nothing\n\t},\n};\nconst store = createContext(defaultContext);\nconst { Provider } = store;\n\nconst StateProvider = ({ children }: { children: JSX.Element }): JSX.Element => {\n\tconst [settings, setSettings] = useLocalStorage(\"settings\", defaultContext.state.settings);\n\n\tconst [state, setState] = useState({ ...defaultContext.state, settings });\n\n\treturn <Provider value={{ state, setState, setSettings }}>{children}</Provider>;\n};\n\nexport { store, StateProvider };\n","import { useState } from \"react\";\n\nexport function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {\n\t// State to store our value\n\t// Pass initial state function to useState so logic is only executed once\n\tconst [storedValue, setStoredValue] = useState(() => {\n\t\ttry {\n\t\t\t// Get from local storage by key\n\t\t\tconst item = window.localStorage.getItem(key);\n\t\t\t// Parse stored json or if none return initialValue\n\t\t\treturn item ? JSON.parse(item) : initialValue;\n\t\t} catch (error) {\n\t\t\t// If error also return initialValue\n\t\t\tconsole.log(error);\n\t\t\treturn initialValue;\n\t\t}\n\t});\n\n\t// Return a wrapped version of useState's setter function that ...\n\t// ... persists the new value to localStorage.\n\tconst setValue = (value: T): void => {\n\t\ttry {\n\t\t\t// Allow value to be a function so we have same API as useState\n\t\t\tconst valueToStore =\n\t\t\t\tvalue instanceof Function ? value(storedValue) : value;\n\t\t\t// Save state\n\t\t\tsetStoredValue(valueToStore);\n\t\t\t// Save to local storage\n\t\t\twindow.localStorage.setItem(key, JSON.stringify(valueToStore));\n\t\t} catch (error) {\n\t\t\t// A more advanced implementation would handle the error case\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\treturn [storedValue, setValue];\n}","import { useContext } from \"react\";\nimport { State, store } from \"./Store\";\n\nexport function useStore(): State {\n\tconst {state} = useContext(store);\n\n\treturn state;\n}\n\nexport function useSetStore(): (state: State) => void {\n\tconst {setState} = useContext(store);\n\n\treturn setState;\n}","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst UserContainer = styled.div`\n\tdisplay: inline-block;\n\tcolor: ${props => props.color};\n\tmargin-right: 3px;\n\tfont-weight: bold;\n`;\n\nexport function User({ displayName, color }: { displayName: string, color: string }): JSX.Element {\n\n\treturn <UserContainer color={color}>\n\t\t{displayName}:\n\t</UserContainer>;\n}","import { PrivmsgMessage } from \"dank-twitch-irc\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\nimport { User } from \"./User\";\n\nconst MessageContainer = styled.div`\n\tmargin: 0 0;\n\tmin-height: 1.5rem;\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-items: center;\n`;\n\nconst Emote = styled.img`\n\tmargin: 0 3px;\n`;\n\nexport const Message = React.memo(function Message({ message, thirdPartyEmotes }: { message: PrivmsgMessage, thirdPartyEmotes: Array<ThirdPartyEmote> }): JSX.Element {\n\n\tconst renderMessage = [];\n\n\tlet replaced;\n\tlet buffer = \"\";\n\n\tfor (let x = 0; x <= message.messageText.length; x++) {\n\t\tconst c = message.messageText[x];\n\n\t\treplaced = false;\n\t\tfor (const emote of message.emotes) {\n\t\t\tif (emote.startIndex === x) {\n\t\t\t\treplaced = true;\n\t\t\t\trenderMessage.push(<Emote\n\t\t\t\t\tkey={x}\n\t\t\t\t\talt={emote.code}\n\t\t\t\t\tsrc={`https://static-cdn.jtvnw.net/emoticons/v1/${emote.id}/1.0`}\n\t\t\t\t/>);\n\t\t\t\tx += emote.endIndex - emote.startIndex - 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!replaced) {\n\t\t\tif (c !== \" \" && x !== message.messageText.length) {\n\t\t\t\tbuffer += c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet emoteFound = false;\n\n\t\t\tfor (const emote of thirdPartyEmotes) {\n\t\t\t\tif (buffer.trim() === emote.code) {\n\t\t\t\t\trenderMessage.push(<Emote\n\t\t\t\t\t\tkey={x}\n\t\t\t\t\t\talt={emote.code}\n\t\t\t\t\t\tsrc={emote.urls.small}\n\t\t\t\t\t/>);\n\t\t\t\t\temoteFound = true;\n\t\t\t\t\tbuffer = \"\";\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!emoteFound) {\n\t\t\t\trenderMessage.push(buffer);\n\t\t\t\tbuffer = \"\";\n\t\t\t}\n\t\t\trenderMessage.push(c);\n\t\t}\n\t}\n\n\treturn <MessageContainer>\n\t\t<User displayName={message.displayName} color={message.colorRaw} /> {renderMessage}\n\t</MessageContainer>;\n}, () => true);","import { PrivmsgMessage } from \"dank-twitch-irc\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { useChat } from \"../chat/useChat\";\nimport { useBttvChannelEmotes } from \"../hooks/useBttvChannelEmotes\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\nimport { Message } from \"./Message\";\n\nconst ChatWindowContainer = styled.div`\n\tflex-grow: 1;\n    display: flex;\n    flex-direction: column;\n\theight: 100%;\n`;\n\nconst MessageScroll = styled.ul`\n    list-style-type: none;\n    flex-grow: 1;\n\toverflow-y: scroll;\n\toverflow-x: hidden;\n\tdisplay: flex;\n\tflex-direction: column-reverse;\n\n\t&::-webkit-scrollbar {\n\t\twidth: 0px;\n\t}\n\t\n\t&::-webkit-scrollbar-track {\n\t\tbackground: transparent;\n\t}\n\n\t&::-webkit-scrollbar-thumb {\n\t\tbackground-color: transparent;\n\t}\n`;\n\nexport function ChatWindow(props: { channel?: string }): JSX.Element {\n\tif (!props.channel) {\n\t\treturn <EmptyChatWindow />;\n\t}\n\n\treturn <ChannelChatWindow channel={props.channel} />;\n}\n\nfunction ChannelChatWindow(props: { channel: string }): JSX.Element {\n\tconst messages = useChat(props.channel);\n\tconst channelId = messages.length > 0 ? messages[0].channelID : \"\";\n\tconst thirdPartyEmotes: Array<ThirdPartyEmote> = [...useBttvChannelEmotes(channelId)];\n\t\n\treturn <ChatWindowContainer>\n\t\t<MessageScroll>\n\t\t\t{messages.map((message: PrivmsgMessage) => <li key={message.messageID}><Message message={message} thirdPartyEmotes={thirdPartyEmotes} /></li>)}\n\t\t</MessageScroll>\n\t</ChatWindowContainer>;\n}\n\nfunction EmptyChatWindow(): JSX.Element {\n\n\treturn <ChatWindowContainer>\n\t\tno chat\n\t</ChatWindowContainer>;\n}","import { PrivmsgMessage } from \"dank-twitch-irc\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useStore } from \"../state/useStore\";\n\nexport function useChat(channel: string, bufferSize = 100): Array<PrivmsgMessage> {\n\tconst { chatClient } = useStore();\n\n\tconst [messages, setMessages] = useState<Array<PrivmsgMessage>>([]);\n\n\tconst handleMessage =  useCallback((message: PrivmsgMessage) => {\n\t\tif (message.channelName === channel) {\n\t\t\tconst newMessages = [...messages];\n\t\t\tif ((newMessages.length + 1) === bufferSize) {\n\t\t\t\tnewMessages.pop();\n\t\t\t}\n\t\t\tnewMessages.unshift(message);\n\n\t\t\tsetMessages(newMessages);\n\t\t}\n\t}, [bufferSize, channel, messages]);\n\n\tuseEffect((): () => void => {\n\t\tchatClient.join(channel);\n\t\tchatClient.on(\"PRIVMSG\", handleMessage);\n\n\t\treturn () => chatClient.removeListener(\"PRIVMSG\", handleMessage);\n\t}, [channel, chatClient, bufferSize, handleMessage]);\n\n\treturn messages;\n}","import { useQuery } from \"react-query\";\nimport { BttvChannelEmotesResponse } from \"../types/BttvChannelEmotesResponse\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\n\nexport function useBttvChannelEmotes(channelId: string): Array<ThirdPartyEmote> {\n\tconst { isLoading, error, data } = useQuery(`bttv:channel:${channelId}`, () => {\n\t\tif (channelId === \"\") {\n\t\t\treturn Promise.resolve({sharedEmotes: [], channelEmotes: []});\n\t\t}\n\n\t\treturn fetch(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`).then(res =>\n\t\t\tres.json() as Promise<BttvChannelEmotesResponse>\n\t\t);\n\t});\n\n\tif (isLoading) {\n\t\treturn [];\n\t}\n\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn [];\n\t}\n\n\tconst emotes = [];\n\n\tfor (const channelEmote of [...data?.channelEmotes ?? [], ...data?.sharedEmotes ?? []]) {\n\t\temotes.push({\n\t\t\tid: channelEmote.id,\n\t\t\tcode: channelEmote.code,\n\t\t\turls: {\n\t\t\t\tsmall: `https://cdn.betterttv.net/emote/${channelEmote.id}/1x`,\n\t\t\t\tmedium: `https://cdn.betterttv.net/emote/${channelEmote.id}/2x`,\n\t\t\t\tbig: `https://cdn.betterttv.net/emote/${channelEmote.id}/3x`,\n\t\t\t}\n\t\t});\n\t}\n\n\treturn emotes;\n}","import { useState, useEffect } from \"react\";\n\ndeclare global {\n\tinterface Document {\n\t\tmozCancelFullScreen?: () => Promise<void>;\n\t\tmsExitFullscreen?: () => Promise<void>;\n\t\twebkitExitFullscreen?: () => Promise<void>;\n\t\tmozFullScreenElement?: Element;\n\t\tmsFullscreenElement?: Element;\n\t\twebkitFullscreenElement?: Element;\n\t}\n\n\tinterface HTMLElement {\n\t\tmsRequestFullscreen?: () => Promise<void>;\n\t\tmozRequestFullScreen?: () => Promise<void>;\n\t\twebkitRequestFullscreen?: () => Promise<void>;\n\t}\n}\n\nexport function isFullScreenElement(el: HTMLElement): boolean {\n\tif (el && el) {\n\t\treturn Boolean(\n\t\t\tdocument.fullscreenElement === el ||\n\t\t\tdocument.mozFullScreenElement === el ||\n\t\t\tdocument.webkitFullscreenElement === el ||\n\t\t\tdocument.msFullscreenElement === el,\n\t\t);\n\t}\n\n\treturn Boolean(\n\t\tdocument.fullscreenElement ||\n\t\tdocument.mozFullScreenElement ||\n\t\tdocument.webkitFullscreenElement ||\n\t\tdocument.msFullscreenElement\n\t);\n}\n\nexport function useFullScreen(element: HTMLElement): [boolean, () => void] {\n\tconst initialState = isFullScreenElement(element);\n\tconst [fullScreen, setFullScreen] = useState(initialState);\n\n\t// access various open fullscreen methods\n\tconst openFullScreen = () => {\n\t\tconst el = (element && element) || document.documentElement;\n\n\t\tif (el.requestFullscreen) return el.requestFullscreen();\n\t\tif (el.mozRequestFullScreen) return el.mozRequestFullScreen();\n\t\tif (el.webkitRequestFullscreen) return el.webkitRequestFullscreen();\n\t\tif (el.msRequestFullscreen) return el.msRequestFullscreen();\n\t};\n\n\t// access various exit fullscreen methods\n\tconst closeFullScreen = () => {\n\t\tif (document.exitFullscreen) return document.exitFullscreen();\n\t\tif (document.mozCancelFullScreen) return document.mozCancelFullScreen();\n\t\tif (document.webkitExitFullscreen) return document.webkitExitFullscreen();\n\t\tif (document.msExitFullscreen) return document.msExitFullscreen();\n\t};\n\n\tuseEffect(() => {\n\t\tfunction handleChange() {\n\t\t\tsetFullScreen(isFullScreenElement(element));\n\t\t}\n\n\t\tdocument.addEventListener(\"webkitfullscreenchange\", handleChange, false);\n\t\tdocument.addEventListener(\"mozfullscreenchange\", handleChange, false);\n\t\tdocument.addEventListener(\"msfullscreenchange\", handleChange, false);\n\t\tdocument.addEventListener(\"MSFullscreenChange\", handleChange, false); // IE11\n\t\tdocument.addEventListener(\"fullscreenchange\", handleChange, false);\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"webkitfullscreenchange\", handleChange);\n\t\t\tdocument.removeEventListener(\"mozfullscreenchange\", handleChange);\n\t\t\tdocument.removeEventListener(\"msfullscreenchange\", handleChange);\n\t\t\tdocument.removeEventListener(\"MSFullscreenChange\", handleChange);\n\t\t\tdocument.removeEventListener(\"fullscreenchange\", handleChange);\n\t\t};\n\t}, [element]);\n\n\treturn [fullScreen, fullScreen ? closeFullScreen : openFullScreen];\n}","import { Button } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { useFullScreen } from \"../hooks/useFullscreen\";\n\nconst MenuContainer = styled.div`\n    display: flex;\n\talign-items: center;\n\tpadding: 5px;\n    width: 100%;\n    height: 2rem;\n\tjustify-content: space-between;\n\n\t.bp3-button {\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tbackground: transparent !important;\n\t}\n`;\n\nexport function Menu(): JSX.Element {\n\tconst [, toggleFullscreen] = useFullScreen(document.body);\n\n\treturn <MenuContainer>\n\t\tSettings\n\t\t<Button icon=\"fullscreen\" onClick={toggleFullscreen}/>\n\t</MenuContainer>;\n}","export const colors = {\n\tbg: \"#121416\",\n\tbgBright: \"#1C1F22\",\n\tbgBrighter: \"#25292D\",\n\tbgDark: \"#090A0B\",\n\ttheme: \"#00CC66\",\n\tthemeBright: \"#00FF80\",\n\ttext: \"#F5F5F5\",\n};","import \"react-mosaic-component/react-mosaic-component.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Mosaic, MosaicWindow } from \"react-mosaic-component\";\nimport styled from \"styled-components\";\nimport { ChatWindow } from \"./layout/ChatWindow\";\nimport { Menu } from \"./layout/Menu\";\nimport { store } from \"./state/Store\";\nimport { Classes } from \"@blueprintjs/core/lib/esm/common\";\nimport { colors } from \"./variables/colors\";\nimport { ReactQueryCacheProvider } from \"react-query\";\n\nconst AppContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n\n\t.mosaic-window-body {\n\t\tpadding: 5px;\n\t}\n\n\t.mosaic.mosaic-blueprint-theme.bp3-dark {\n\t\tbackground: ${colors.bgDark};\n\n\t\t.mosaic-window-body {\n\t\t\tbackground: ${colors.bg};\n\t\t}\n\n\t\t.mosaic-window-toolbar {\n\t\t\tbackground: ${colors.bgBright};\n\t\t}\n\n\t\t.mosaic-window-toolbar.draggable:hover {\n\t\t\tbackground: ${colors.bgBrighter};\n\t\t}\n\t}\n`;\n\nexport function App(): JSX.Element {\n\tconst { state } = useContext(store);\n\n\tuseEffect(() => {\n\t\tstate.chatClient.connect();\n\t}, [state.chatClient]);\n\n\treturn (\n\t\t<ReactQueryCacheProvider queryCache={state.queryCache}>\n\t\t\t<AppContainer className={`mosaic-blueprint-theme ${Classes.DARK}`}>\n\t\t\t\t<Menu />\n\t\t\t\t<Mosaic<string>\n\t\t\t\t\tclassName={`mosaic-blueprint-theme ${Classes.DARK}`}\n\t\t\t\t\trenderTile={(id, path) =>\n\t\t\t\t\t\t<MosaicWindow<string> path={path} createNode={() => prompt(\"Enter Channel Name\") ?? \"\"} title={id}>\n\t\t\t\t\t\t\t<ChatWindow channel={id} />\n\t\t\t\t\t\t</MosaicWindow>\n\t\t\t\t\t}\n\t\t\t\t\tinitialValue={state.settings}\n\t\t\t\t/>\n\t\t\t</AppContainer>\n\t\t</ReactQueryCacheProvider>\n\t);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {App} from \"./App\";\nimport { StateProvider } from \"./state/Store\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<StateProvider>\n\t\t\t<App />\n\t\t</StateProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}