{"version":3,"sources":["hooks/useLocalStorage.ts","state/Store.tsx","services/listAllSplits.ts","state/useStore.tsx","state/QueryDefaults.ts","hooks/useThirdPartyEmotes.ts","hooks/useBttvChannelEmotes.ts","hooks/useFfzChannelEmotes.ts","hooks/useBttvGlobalEmotes.ts","hooks/useFfzGlobalEmotes.ts","layout/User.tsx","layout/Message.tsx","layout/ChatWindow.tsx","chat/useChat.tsx","hooks/useFullscreen.tsx","layout/Menu.tsx","services/createRandomString.ts","variables/colors.ts","App.tsx","index.tsx"],"names":["useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","setValue","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","defaultContext","state","chatClient","ChatClient","connection","type","secure","channels","settings","queryCache","QueryCache","setState","setSettings","setChannels","store","createContext","Provider","StateProvider","children","setSettingsStorage","node","newChannels","allSplits","Array","from","Set","search","subNode","splits","subElements","first","push","second","channelsToDelete","Object","keys","filter","channelKey","includes","useStore","useContext","QueryDefaults","staleTime","useThirdPartyEmotes","channelId","useQuery","Promise","resolve","sharedEmotes","channelEmotes","fetch","then","res","json","isLoading","data","emotes","channelEmote","id","code","urls","small","medium","big","useBttvChannelEmotes","sets","values","set","emoticons","String","name","useFfzChannelEmotes","useBttvGlobalEmotes","useFfzGlobalEmotes","UserContainer","styled","div","attrs","props","style","color","User","displayName","renderColor","MessageContainer","Emote","img","Message","React","memo","replaced","message","thirdPartyEmotes","renderMessage","buffer","x","messageText","length","c","emote","startIndex","alt","src","endIndex","emoteFound","trim","colorRaw","ChatWindowContainer","NoChatWindowContainer","MessageScroll","ul","ChatWindow","channel","ChannelChatWindow","EmptyChatWindow","messages","bufferSize","setMessages","handleMessage","useCallback","channelName","newMessages","pop","unshift","useEffect","join","on","removeListener","useChat","channelID","map","messageID","setChannel","submitButton","content","icon","minimal","onSubmit","e","preventDefault","target","HTMLFormElement","newState","toLowerCase","placeholder","onChange","large","rightElement","isFullScreenElement","el","Boolean","document","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","MenuContainer","Menu","element","initialState","fullScreen","setFullScreen","handleChange","addEventListener","removeEventListener","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","useFullScreen","body","toggleFullscreen","onClick","createRandomString","Math","random","toString","substr","colors","AppContainer","App","connect","className","Classes","DARK","renderTile","path","createNode","title","onRelease","newNode","zeroStateView","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b6321b26.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nexport function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {\n\t// State to store our value\n\t// Pass initial state function to useState so logic is only executed once\n\tconst [storedValue, setStoredValue] = useState(() => {\n\t\ttry {\n\t\t\t// Get from local storage by key\n\t\t\tconst item = window.localStorage.getItem(key);\n\t\t\t// Parse stored json or if none return initialValue\n\t\t\treturn item ? JSON.parse(item) : initialValue;\n\t\t} catch (error) {\n\t\t\t// If error also return initialValue\n\t\t\tconsole.log(error);\n\t\t\tsetValue(initialValue);\n\t\t\treturn initialValue;\n\t\t}\n\t});\n\n\t// Return a wrapped version of useState's setter function that ...\n\t// ... persists the new value to localStorage.\n\tconst setValue = (value: T): void => {\n\t\ttry {\n\t\t\t// Allow value to be a function so we have same API as useState\n\t\t\tconst valueToStore =\n\t\t\t\tvalue instanceof Function ? value(storedValue) : value;\n\t\t\t// Save state\n\t\t\tsetStoredValue(valueToStore);\n\t\t\t// Save to local storage\n\t\t\twindow.localStorage.setItem(key, JSON.stringify(valueToStore));\n\t\t} catch (error) {\n\t\t\t// A more advanced implementation would handle the error case\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\treturn [storedValue, setValue];\n}","import { ChatClient } from \"dank-twitch-irc\";\nimport React, { createContext, useState } from \"react\";\nimport { MosaicNode } from \"react-mosaic-component\";\nimport { QueryCache } from \"react-query\";\nimport { useLocalStorage } from \"../hooks/useLocalStorage\";\nimport { listAllSplits } from \"../services/listAllSplits\";\n\nexport interface State {\n\tchatClient: ChatClient,\n\tsettings: MosaicNode<string> | null,\n\tchannels: Record<string, string>,\n\tqueryCache: QueryCache,\n}\n\nexport type Action = Record<string, unknown>;\n\nconst defaultContext = {\n\tstate: {\n\t\tchatClient: new ChatClient({\n\t\t\tconnection: {\n\t\t\t\ttype: \"websocket\",\n\t\t\t\tsecure: true,\n\t\t\t}\n\t\t}),\n\t\tchannels: {},\n\t\tsettings: null,\n\t\tqueryCache: new QueryCache(),\n\t} as State,\n\tsetState: (state: State) => {\n\t\t// do nothing\n\t},\n\tsetSettings: (settings: MosaicNode<string> | null, channels: Record<string, string>) => {\n\t\t// do nothing\n\t},\n\tsetChannels: (channels: Record<string, string>) => {\n\t\t// do nothing\n\t},\n};\n\nconst store = createContext(defaultContext);\nconst { Provider } = store;\n\nconst StateProvider = ({ children }: { children: JSX.Element }): JSX.Element => {\n\t\n\tconst [settings, setSettingsStorage] = useLocalStorage(\"settings\", defaultContext.state.settings);\n\tconst [channels, setChannels] = useLocalStorage(\"channels\", defaultContext.state.channels);\n\n\tconst [state, setState] = useState({ ...defaultContext.state, settings, channels });\n\n\tconst setSettings = (settings: MosaicNode<string> | null, channels: Record<string, string>) => {\n\n\t\tconst newChannels = {...channels};\n\t\tconst allSplits = listAllSplits(settings);\n\t\tconst channelsToDelete = Object.keys(channels).filter(channelKey => !allSplits.includes(channelKey));\n\n\t\tfor (const toDelete of channelsToDelete) {\n\t\t\tdelete newChannels[toDelete];\n\t\t}\n\n\t\tsetSettingsStorage(settings);\n\t\tsetChannels(newChannels);\n\t\tsetState({...state, settings: settings, channels: newChannels});\n\t};\n\n\treturn <Provider value={{ state, setState, setSettings, setChannels }}>{children}</Provider>;\n};\n\nexport { store, StateProvider };\n","import { MosaicNode } from \"react-mosaic-component\";\n\nexport function listAllSplits(node: MosaicNode<string> | null): Array<string> {\n\tconst splits: Array<string> = [];\n\n\tconst search = (subNode: MosaicNode<string> | null, splits: Array<string>): Array<string> => {\n\t\tif (subNode === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (typeof subNode === \"string\") {\n\t\t\treturn [...splits, subNode];\n\t\t}\n\n\t\tif (typeof subNode === \"object\") {\n\t\t\tconst subElements = [...splits];\n\n\t\t\tif (typeof subNode.first === \"string\") {\n\t\t\t\tsubElements.push(subNode.first);\t\n\t\t\t}\n\t\t\tif (typeof subNode.first === \"object\") {\n\t\t\t\tsubElements.push(...search(subNode.first, subElements));\n\t\t\t}\n\n\t\t\tif (typeof subNode.second === \"string\") {\n\t\t\t\tsubElements.push(subNode.second);\t\n\t\t\t}\n\t\t\tif (typeof subNode.second === \"object\") {\n\t\t\t\tsubElements.push(...search(subNode.second, subElements));\n\t\t\t}\n\t\t\t\n\t\t\treturn [...splits, ...subElements];\n\t\t}\n\n\t\treturn [];\n\t};\n\n\treturn Array.from(new Set(search(node, splits)));\n}","import { useContext } from \"react\";\nimport { State, store } from \"./Store\";\n\nexport function useStore(): State {\n\tconst {state} = useContext(store);\n\n\treturn state;\n}\n\nexport function useSetStore(): (state: State) => void {\n\tconst {setState} = useContext(store);\n\n\treturn setState;\n}","export const QueryDefaults = {\n\tstaleTime: 5 * 60  * 1000,\n};","import { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\nimport { useBttvChannelEmotes } from \"./useBttvChannelEmotes\";\nimport { useBttvGlobalEmotes } from \"./useBttvGlobalEmotes\";\nimport { useFfzChannelEmotes } from \"./useFfzChannelEmotes\";\nimport { useFfzGlobalEmotes } from \"./useFfzGlobalEmotes\";\n\nexport function useThirdPartyEmotes(channelId: string): Array<ThirdPartyEmote> {\n\tconst thirdPartyEmotes: Array<ThirdPartyEmote> = [\n\t\t...useBttvChannelEmotes(channelId),\n\t\t...useFfzChannelEmotes(channelId),\n\t\t...useBttvGlobalEmotes(),\n\t\t...useFfzGlobalEmotes(),\n\t];\n\n\treturn thirdPartyEmotes;\n}","import { useQuery } from \"react-query\";\nimport { QueryDefaults } from \"../state/QueryDefaults\";\nimport { BttvChannelEmotesResponse } from \"../types/Bttv\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\n\nexport function useBttvChannelEmotes(channelId: string): Array<ThirdPartyEmote> {\n\tconst { isLoading, error, data } = useQuery(`bttv:channel:${channelId}`, () => {\n\t\tif (channelId === \"\") {\n\t\t\treturn Promise.resolve({sharedEmotes: [], channelEmotes: []});\n\t\t}\n\n\t\treturn fetch(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`).then(res =>\n\t\t\tres.json() as Promise<BttvChannelEmotesResponse>\n\t\t);\n\t}, QueryDefaults);\n\n\tif (isLoading) {\n\t\treturn [];\n\t}\n\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn [];\n\t}\n\n\tconst emotes = [];\n\n\tfor (const channelEmote of [...data?.channelEmotes ?? [], ...data?.sharedEmotes ?? []]) {\n\t\temotes.push({\n\t\t\tid: channelEmote.id,\n\t\t\tcode: channelEmote.code,\n\t\t\turls: {\n\t\t\t\tsmall: `https://cdn.betterttv.net/emote/${channelEmote.id}/1x`,\n\t\t\t\tmedium: `https://cdn.betterttv.net/emote/${channelEmote.id}/2x`,\n\t\t\t\tbig: `https://cdn.betterttv.net/emote/${channelEmote.id}/3x`,\n\t\t\t}\n\t\t});\n\t}\n\n\treturn emotes;\n}","import { useQuery } from \"react-query\";\nimport { QueryDefaults } from \"../state/QueryDefaults\";\nimport { EmoteSet, FfzChannelEmotesResponse } from \"../types/Ffz\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\n\nexport function useFfzChannelEmotes(channelId: string): Array<ThirdPartyEmote> {\n\tconst { isLoading, error, data } = useQuery(`ffz:channel:${channelId}`, () => {\n\t\tif (channelId === \"\") {\n\t\t\treturn Promise.resolve({sets: {}});\n\t\t}\n\n\t\treturn fetch(`https://api.frankerfacez.com/v1/room/id/${channelId}`).then(res =>\n\t\t\tres.json() as Promise<FfzChannelEmotesResponse>\n\t\t);\n\t}, QueryDefaults);\n\n\tif (isLoading || !data?.sets) {\n\t\treturn [];\n\t}\n\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn [];\n\t}\n\n\tconst emotes = [];\n\n\tfor (const set of Object.values(data.sets) as Array<EmoteSet>) {\n\t\tfor (const channelEmote of set.emoticons) {\n\t\t\temotes.push({\n\t\t\t\tid: String(channelEmote.id),\n\t\t\t\tcode: channelEmote.name,\n\t\t\t\turls: {\n\t\t\t\t\tsmall: channelEmote.urls[\"1\"],\n\t\t\t\t\tmedium: channelEmote.urls[\"2\"],\n\t\t\t\t\tbig: channelEmote.urls[\"4\"],\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\treturn emotes;\n}","import { useQuery } from \"react-query\";\nimport { QueryDefaults } from \"../state/QueryDefaults\";\nimport { BttvGlobalEmotesResponse } from \"../types/Bttv\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\n\nexport function useBttvGlobalEmotes(): Array<ThirdPartyEmote> {\n\tconst { isLoading, error, data } = useQuery(\"bttv:global\", () => {\n\t\treturn fetch(\"https://api.betterttv.net/3/cached/emotes/global\").then(res =>\n\t\t\tres.json() as Promise<BttvGlobalEmotesResponse>\n\t\t);\n\t}, QueryDefaults);\n\n\tif (isLoading || !data) {\n\t\treturn [];\n\t}\n\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn [];\n\t}\n\n\tconst emotes = [];\n\n\tfor (const channelEmote of data) {\n\t\temotes.push({\n\t\t\tid: channelEmote.id,\n\t\t\tcode: channelEmote.code,\n\t\t\turls: {\n\t\t\t\tsmall: `https://cdn.betterttv.net/emote/${channelEmote.id}/1x`,\n\t\t\t\tmedium: `https://cdn.betterttv.net/emote/${channelEmote.id}/2x`,\n\t\t\t\tbig: `https://cdn.betterttv.net/emote/${channelEmote.id}/3x`,\n\t\t\t}\n\t\t});\n\t}\n\n\treturn emotes;\n}","import { useQuery } from \"react-query\";\nimport { QueryDefaults } from \"../state/QueryDefaults\";\nimport { EmoteSet, FfzGlobalEmotesResponse } from \"../types/Ffz\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\n\nexport function useFfzGlobalEmotes(): Array<ThirdPartyEmote> {\n\tconst { isLoading, error, data } = useQuery(\"ffz:global\", () => {\n\t\treturn fetch(\"https://api.frankerfacez.com/v1/set/global\").then(res =>\n\t\t\tres.json() as Promise<FfzGlobalEmotesResponse>\n\t\t);\n\t}, QueryDefaults);\n\n\tif (isLoading || !data?.sets) {\n\t\treturn [];\n\t}\n\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn [];\n\t}\n\n\tconst emotes = [];\n\n\tfor (const set of Object.values(data.sets) as Array<EmoteSet>) {\n\t\tfor (const channelEmote of set.emoticons) {\n\t\t\temotes.push({\n\t\t\t\tid: String(channelEmote.id),\n\t\t\t\tcode: channelEmote.name,\n\t\t\t\turls: {\n\t\t\t\t\tsmall: channelEmote.urls[\"1\"],\n\t\t\t\t\tmedium: channelEmote.urls[\"2\"],\n\t\t\t\t\tbig: channelEmote.urls[\"4\"],\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\treturn emotes;\n}","import React from \"react\";\nimport styled from \"styled-components\";\n\n\n\nconst UserContainer = styled.div.attrs(props => ({\n\tstyle: {\n\t\tcolor: props.color,\n\t}\n}))`\n\tdisplay: inline-block;\n\tmargin-right: 3px;\n\tfont-weight: bold;\n`;\n\nexport function User({ displayName, color }: { displayName: string, color: string }): JSX.Element {\n\t\n\tconst renderColor = color !== \"\" ? color : \"grey\";\n\n\treturn <UserContainer color={renderColor}>\n\t\t{displayName}:\n\t</UserContainer>;\n}","import { PrivmsgMessage } from \"dank-twitch-irc\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\nimport { User } from \"./User\";\n\nconst MessageContainer = styled.div`\n\tmargin: 0 0;\n\tmin-height: 1.5rem;\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-items: center;\n`;\n\nconst Emote = styled.img`\n\tmargin: 0 3px;\n`;\n\nexport const Message = React.memo(function Message({ message, thirdPartyEmotes }: { message: PrivmsgMessage, thirdPartyEmotes: Array<ThirdPartyEmote> }): JSX.Element {\n\n\tconst renderMessage = [];\n\n\tlet replaced;\n\tlet buffer = \"\";\n\n\tfor (let x = 0; x <= message.messageText.length; x++) {\n\t\tconst c = message.messageText[x];\n\n\t\treplaced = false;\n\t\tfor (const emote of message.emotes) {\n\t\t\tif (emote.startIndex === x) {\n\t\t\t\treplaced = true;\n\t\t\t\trenderMessage.push(<Emote\n\t\t\t\t\tkey={x}\n\t\t\t\t\talt={emote.code}\n\t\t\t\t\tsrc={`https://static-cdn.jtvnw.net/emoticons/v1/${emote.id}/1.0`}\n\t\t\t\t/>);\n\t\t\t\tx += emote.endIndex - emote.startIndex - 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!replaced) {\n\t\t\tif (c !== \" \" && x !== message.messageText.length) {\n\t\t\t\tbuffer += c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet emoteFound = false;\n\n\t\t\tfor (const emote of thirdPartyEmotes) {\n\t\t\t\tif (buffer.trim() === emote.code) {\n\t\t\t\t\trenderMessage.push(<Emote\n\t\t\t\t\t\tkey={x}\n\t\t\t\t\t\talt={emote.code}\n\t\t\t\t\t\tsrc={emote.urls.small}\n\t\t\t\t\t/>);\n\t\t\t\t\temoteFound = true;\n\t\t\t\t\tbuffer = \"\";\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!emoteFound) {\n\t\t\t\trenderMessage.push(buffer);\n\t\t\t\tbuffer = \"\";\n\t\t\t}\n\t\t\trenderMessage.push(c);\n\t\t}\n\t}\n\n\treturn <MessageContainer>\n\t\t<User displayName={message.displayName} color={message.colorRaw} /> {renderMessage}\n\t</MessageContainer>;\n}, () => true);","import { Button, InputGroup, Tooltip } from \"@blueprintjs/core\";\nimport { PrivmsgMessage } from \"dank-twitch-irc\";\nimport React, { useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useChat } from \"../chat/useChat\";\nimport { useThirdPartyEmotes } from \"../hooks/useThirdPartyEmotes\";\nimport { store } from \"../state/Store\";\nimport { Message } from \"./Message\";\n\nconst ChatWindowContainer = styled.div`\n\tflex-grow: 1;\n    display: flex;\n    flex-direction: column;\n\theight: 100%;\n`;\n\nconst NoChatWindowContainer = styled.div`\n    display: flex;\n\talign-items: center;\n    justify-content: center;\n\theight: 100%;\n`;\n\nconst MessageScroll = styled.ul`\n    list-style-type: none;\n    flex-grow: 1;\n\toverflow-y: scroll;\n\toverflow-x: hidden;\n\tdisplay: flex;\n\tflex-direction: column-reverse;\n\n\t&::-webkit-scrollbar {\n\t\twidth: 0px;\n\t}\n\t\n\t&::-webkit-scrollbar-track {\n\t\tbackground: transparent;\n\t}\n\n\t&::-webkit-scrollbar-thumb {\n\t\tbackground-color: transparent;\n\t}\n`;\n\nexport function ChatWindow(props: { channel?: string, id: string }): JSX.Element {\n\tif (!props.channel) {\n\t\treturn <EmptyChatWindow id={props.id} />;\n\t}\n\n\treturn <ChannelChatWindow channel={props.channel} />;\n}\n\nfunction ChannelChatWindow(props: { channel: string }): JSX.Element {\n\tconst messages = useChat(props.channel);\n\tconst channelId = messages.length > 0 ? messages[0].channelID : \"\";\n\tconst thirdPartyEmotes = useThirdPartyEmotes(channelId);\n\n\treturn <ChatWindowContainer>\n\t\t<MessageScroll>\n\t\t\t{messages.map((message: PrivmsgMessage) => <li key={message.messageID}><Message message={message} thirdPartyEmotes={thirdPartyEmotes} /></li>)}\n\t\t</MessageScroll>\n\t</ChatWindowContainer>;\n}\n\nfunction EmptyChatWindow({ id }: { id: string }): JSX.Element {\n\tconst { state, setState } = useContext(store);\n\tconst [channel, setChannel] = useState(\"\");\n\n\tconst handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n\t\te.preventDefault();\n\t\tif (e.target instanceof HTMLFormElement) {\n\t\t\tconst newState = { ...state, channels: { ...state.channels, [id]: channel.toLowerCase() } };\n\t\t\tif (state.settings === null) {\n\t\t\t\tnewState.settings = id;\n\t\t\t}\n\t\t\tsetState(newState);\n\t\t}\n\t};\n\n\tconst submitButton = (\n\t\t<Tooltip content={\"Join\"}>\n\t\t\t<Button\n\t\t\t\ticon={\"chat\"}\n\t\t\t\ttype=\"submit\"\n\t\t\t\tminimal={true}\n\t\t\t/>\n\t\t</Tooltip>\n\t);\n\n\treturn <NoChatWindowContainer>\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<InputGroup\n\t\t\t\tplaceholder=\"channel\"\n\t\t\t\tname=\"channel\"\n\t\t\t\tvalue={channel}\n\t\t\t\tonChange={(e: React.FormEvent<HTMLElement>) => setChannel((e.target as HTMLInputElement).value)}\n\t\t\t\tlarge\n\t\t\t\trightElement={submitButton}\n\t\t\t\ttype={\"text\"}\n\t\t\t/>\n\t\t</form>\n\t</NoChatWindowContainer>;\n}","import { PrivmsgMessage } from \"dank-twitch-irc\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useStore } from \"../state/useStore\";\n\nexport function useChat(channel: string, bufferSize = 100): Array<PrivmsgMessage> {\n\tconst { chatClient } = useStore();\n\n\tconst [messages, setMessages] = useState<Array<PrivmsgMessage>>([]);\n\n\tconst handleMessage =  useCallback((message: PrivmsgMessage) => {\n\t\tif (message.channelName === channel) {\n\t\t\tconst newMessages = [...messages];\n\t\t\tif ((newMessages.length + 1) === bufferSize) {\n\t\t\t\tnewMessages.pop();\n\t\t\t}\n\t\t\tnewMessages.unshift(message);\n\n\t\t\tsetMessages(newMessages);\n\t\t}\n\t}, [bufferSize, channel, messages]);\n\n\tuseEffect((): () => void => {\n\t\tif (channel === \"\") {\n\t\t\treturn () => {\n\t\t\t\t// do nothing\n\t\t\t};\n\t\t}\n\t\tchatClient.join(channel);\n\t\tchatClient.on(\"PRIVMSG\", handleMessage);\n\n\t\treturn () => chatClient.removeListener(\"PRIVMSG\", handleMessage);\n\t}, [channel, chatClient, bufferSize, handleMessage]);\n\n\treturn messages;\n}","import { useState, useEffect } from \"react\";\n\ndeclare global {\n\tinterface Document {\n\t\tmozCancelFullScreen?: () => Promise<void>;\n\t\tmsExitFullscreen?: () => Promise<void>;\n\t\twebkitExitFullscreen?: () => Promise<void>;\n\t\tmozFullScreenElement?: Element;\n\t\tmsFullscreenElement?: Element;\n\t\twebkitFullscreenElement?: Element;\n\t}\n\n\tinterface HTMLElement {\n\t\tmsRequestFullscreen?: () => Promise<void>;\n\t\tmozRequestFullScreen?: () => Promise<void>;\n\t\twebkitRequestFullscreen?: () => Promise<void>;\n\t}\n}\n\nexport function isFullScreenElement(el: HTMLElement): boolean {\n\tif (el && el) {\n\t\treturn Boolean(\n\t\t\tdocument.fullscreenElement === el ||\n\t\t\tdocument.mozFullScreenElement === el ||\n\t\t\tdocument.webkitFullscreenElement === el ||\n\t\t\tdocument.msFullscreenElement === el,\n\t\t);\n\t}\n\n\treturn Boolean(\n\t\tdocument.fullscreenElement ||\n\t\tdocument.mozFullScreenElement ||\n\t\tdocument.webkitFullscreenElement ||\n\t\tdocument.msFullscreenElement\n\t);\n}\n\nexport function useFullScreen(element: HTMLElement): [boolean, () => void] {\n\tconst initialState = isFullScreenElement(element);\n\tconst [fullScreen, setFullScreen] = useState(initialState);\n\n\t// access various open fullscreen methods\n\tconst openFullScreen = () => {\n\t\tconst el = (element && element) || document.documentElement;\n\n\t\tif (el.requestFullscreen) return el.requestFullscreen();\n\t\tif (el.mozRequestFullScreen) return el.mozRequestFullScreen();\n\t\tif (el.webkitRequestFullscreen) return el.webkitRequestFullscreen();\n\t\tif (el.msRequestFullscreen) return el.msRequestFullscreen();\n\t};\n\n\t// access various exit fullscreen methods\n\tconst closeFullScreen = () => {\n\t\tif (document.exitFullscreen) return document.exitFullscreen();\n\t\tif (document.mozCancelFullScreen) return document.mozCancelFullScreen();\n\t\tif (document.webkitExitFullscreen) return document.webkitExitFullscreen();\n\t\tif (document.msExitFullscreen) return document.msExitFullscreen();\n\t};\n\n\tuseEffect(() => {\n\t\tfunction handleChange() {\n\t\t\tsetFullScreen(isFullScreenElement(element));\n\t\t}\n\n\t\tdocument.addEventListener(\"webkitfullscreenchange\", handleChange, false);\n\t\tdocument.addEventListener(\"mozfullscreenchange\", handleChange, false);\n\t\tdocument.addEventListener(\"msfullscreenchange\", handleChange, false);\n\t\tdocument.addEventListener(\"MSFullscreenChange\", handleChange, false); // IE11\n\t\tdocument.addEventListener(\"fullscreenchange\", handleChange, false);\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"webkitfullscreenchange\", handleChange);\n\t\t\tdocument.removeEventListener(\"mozfullscreenchange\", handleChange);\n\t\t\tdocument.removeEventListener(\"msfullscreenchange\", handleChange);\n\t\t\tdocument.removeEventListener(\"MSFullscreenChange\", handleChange);\n\t\t\tdocument.removeEventListener(\"fullscreenchange\", handleChange);\n\t\t};\n\t}, [element]);\n\n\treturn [fullScreen, fullScreen ? closeFullScreen : openFullScreen];\n}","import { Button } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { useFullScreen } from \"../hooks/useFullscreen\";\n\nconst MenuContainer = styled.div`\n    display: flex;\n\talign-items: center;\n\tpadding: 5px;\n    width: 100%;\n    height: 2rem;\n\tjustify-content: space-between;\n\n\t.bp3-button {\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tbackground: transparent !important;\n\t}\n`;\n\nexport function Menu(): JSX.Element {\n\tconst [, toggleFullscreen] = useFullScreen(document.body);\n\n\treturn <MenuContainer>\n\t\tSettings\n\t\t<Button icon=\"fullscreen\" onClick={toggleFullscreen}/>\n\t</MenuContainer>;\n}","\n// Generate unique IDs for use as pseudo-private/protected names.\n// Similar in concept to\n// <http://wiki.ecmascript.org/doku.php?id=strawman:names>.\n//\n// The goals of this function are twofold:\n// \n// * Provide a way to generate a string guaranteed to be unique when compared\n//   to other strings generated by this function.\n// * Make the string complex enough that it is highly unlikely to be\n//   accidentally duplicated by hand (this is key if you're using `ID`\n//   as a private/protected name on an object).\n//\n// Use:\n//\n//     var privateName = ID();\n//     var o = { 'public': 'foo' };\n//     o[privateName] = 'bar';\nexport function createRandomString(): string {\n\t// Math.random should be unique because of its seeding algorithm.\n\t// Convert it to base 36 (numbers + letters), and grab the first 9 characters\n\t// after the decimal.\n\treturn Math.random().toString(36).substr(2, 9).toString();\n}","export const colors = {\n\tbg: \"#121416\",\n\tbgBright: \"#1C1F22\",\n\tbgBrighter: \"#25292D\",\n\tbgDark: \"#090A0B\",\n\ttheme: \"#00CC66\",\n\tthemeBright: \"#00FF80\",\n\ttext: \"#F5F5F5\",\n};","import \"@blueprintjs/core/lib/css/blueprint.css\";\nimport { Classes } from \"@blueprintjs/core/lib/esm/common\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Mosaic, MosaicWindow } from \"react-mosaic-component\";\nimport \"react-mosaic-component/react-mosaic-component.css\";\nimport { ReactQueryCacheProvider } from \"react-query\";\nimport styled from \"styled-components\";\nimport { ChatWindow } from \"./layout/ChatWindow\";\nimport { Menu } from \"./layout/Menu\";\nimport { createRandomString } from \"./services/createRandomString\";\nimport { store } from \"./state/Store\";\nimport { colors } from \"./variables/colors\";\n\nconst AppContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n\n\t.mosaic-window-body {\n\t\tpadding: 5px;\n\t}\n\n\t.mosaic.mosaic-blueprint-theme.bp3-dark {\n\t\tbackground: ${colors.bgDark};\n\n\t\t.mosaic-window-body {\n\t\t\tbackground: ${colors.bg};\n\t\t}\n\n\t\t.mosaic-window-toolbar {\n\t\t\tbackground: ${colors.bgBright};\n\t\t}\n\n\t\t.mosaic-window-toolbar.draggable:hover {\n\t\t\tbackground: ${colors.bgBrighter};\n\t\t}\n\t}\n`;\n\nexport function App(): JSX.Element {\n\tconst { state, setSettings } = useContext(store);\n\n\tuseEffect(() => {\n\t\tstate.chatClient.connect();\n\t}, [state.chatClient]);\n\n\t// find a better soluton for this\n\tuseEffect(() => {\n\t\twindow.localStorage.setItem(\"channels\", JSON.stringify(state.channels));\n\t}, [state.channels]);\n\n\tuseEffect(() => {\n\t\twindow.localStorage.setItem(\"settings\", JSON.stringify(state.settings));\n\t}, [state.settings]);\n\n\treturn (\n\t\t<ReactQueryCacheProvider queryCache={state.queryCache}>\n\t\t\t<AppContainer className={`mosaic-blueprint-theme ${Classes.DARK}`}>\n\t\t\t\t<Menu />\n\t\t\t\t<Mosaic<string>\n\t\t\t\t\tclassName={`mosaic-blueprint-theme ${Classes.DARK}`}\n\t\t\t\t\trenderTile={(id, path) =>\n\t\t\t\t\t\t<MosaicWindow<string> path={path} createNode={createRandomString} title={state.channels[id] ?? \"\"}>\n\t\t\t\t\t\t\t<ChatWindow channel={state.channels[id] ?? \"\"} id={id} />\n\t\t\t\t\t\t</MosaicWindow>\n\t\t\t\t\t}\n\t\t\t\t\tonRelease={(newNode) => setSettings(newNode, state.channels)}\n\t\t\t\t\tinitialValue={state.settings}\n\t\t\t\t\tzeroStateView={<ChatWindow id={createRandomString()} />}\n\t\t\t\t/>\n\t\t\t</AppContainer>\n\t\t</ReactQueryCacheProvider>\n\t);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport { StateProvider } from \"./state/Store\";\n\nReactDOM.render(\n\t// <React.StrictMode>\n\t<StateProvider>\n\t\t<App />\n\t</StateProvider>,\n\t// </React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}