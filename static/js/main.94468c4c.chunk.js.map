{"version":3,"sources":["state/Store.tsx","hooks/useLocalStorage.ts","state/useStore.tsx","variables/colors.ts","layout/User.tsx","layout/Message.tsx","layout/ChatWindow.tsx","chat/useChat.tsx","layout/Menu.tsx","App.tsx","index.tsx"],"names":["defaultContext","state","chatClient","ChatClient","connection","type","secure","settings","tabs","setState","setSettings","store","createContext","Provider","StateProvider","children","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","useStore","useContext","colors","UserContainer","styled","div","props","color","User","displayName","MessageContainer","Emote","img","Message","replaced","message","renderMessage","buffer","x","messageText","length","c","emotes","emote","startIndex","push","alt","code","src","id","endIndex","colorRaw","TabContainer","SplitContainer","Container","MessageScroll","ul","ChatWindow","messages","channel","bufferSize","setMessages","handleMessage","useCallback","channelName","newMessages","pop","unshift","useEffect","join","on","removeListener","useChat","map","messageID","MenuContainer","Menu","ELEMENT_MAP","a","b","AppContainer","App","connect","className","Classes","DARK","renderTile","direction","first","second","splitPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94468c4c.chunk.js","sourcesContent":["import { ChatClient } from \"dank-twitch-irc\";\nimport React, { createContext, useState } from \"react\";\nimport { Settings } from \"../chat/Settings\";\nimport { useLocalStorage } from \"../hooks/useLocalStorage\";\n\nexport interface State {\n\tchatClient: ChatClient,\n\tsettings: Settings\n}\n\nexport type Action = Record<string, unknown>;\n\nconst defaultContext = {\n\tstate: {\n\t\tchatClient: new ChatClient({\n\t\t\tconnection: {\n\t\t\t\ttype: \"websocket\",\n\t\t\t\tsecure: true,\n\t\t\t}\n\t\t}),\n\t\tsettings: { tabs: [] } as Settings\n\t},\n\tsetState: (state: State) => { \n\t\t// do nothing\n\t},\n\tsetSettings: (settings: Settings) => { \n\t\t// do nothing\n\t},\n};\nconst store = createContext(defaultContext);\nconst { Provider } = store;\n\nconst StateProvider = ({ children }: { children: JSX.Element }): JSX.Element => {\n\tconst [settings, setSettings] = useLocalStorage(\"settings\", defaultContext.state.settings);\n\n\tconst [state, setState] = useState({...defaultContext.state, settings});\n\n\treturn <Provider value={{ state, setState, setSettings }}>{children}</Provider>;\n};\n\nexport { store, StateProvider };\n","import { useState } from \"react\";\n\nexport function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {\n\t// State to store our value\n\t// Pass initial state function to useState so logic is only executed once\n\tconst [storedValue, setStoredValue] = useState(() => {\n\t\ttry {\n\t\t\t// Get from local storage by key\n\t\t\tconst item = window.localStorage.getItem(key);\n\t\t\t// Parse stored json or if none return initialValue\n\t\t\treturn item ? JSON.parse(item) : initialValue;\n\t\t} catch (error) {\n\t\t\t// If error also return initialValue\n\t\t\tconsole.log(error);\n\t\t\treturn initialValue;\n\t\t}\n\t});\n\n\t// Return a wrapped version of useState's setter function that ...\n\t// ... persists the new value to localStorage.\n\tconst setValue = (value: T): void => {\n\t\ttry {\n\t\t\t// Allow value to be a function so we have same API as useState\n\t\t\tconst valueToStore =\n\t\t\t\tvalue instanceof Function ? value(storedValue) : value;\n\t\t\t// Save state\n\t\t\tsetStoredValue(valueToStore);\n\t\t\t// Save to local storage\n\t\t\twindow.localStorage.setItem(key, JSON.stringify(valueToStore));\n\t\t} catch (error) {\n\t\t\t// A more advanced implementation would handle the error case\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\treturn [storedValue, setValue];\n}","import { useContext } from \"react\";\nimport { State, store } from \"./Store\";\n\nexport function useStore(): State {\n\tconst {state} = useContext(store);\n\n\treturn state;\n}\n\nexport function useSetStore(): (state: State) => void {\n\tconst {setState} = useContext(store);\n\n\treturn setState;\n}","export const colors = {\n\tbg: \"#121416\",\n\tbgBright: \"#1C1F22\",\n\tbgDark: \"#090A0B\",\n\ttheme: \"#00CC66\",\n\tthemeBright: \"#00FF80\",\n\ttext: \"#F5F5F5\",\n};","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst UserContainer = styled.div`\n\tdisplay: inline-block;\n\tcolor: ${props => props.color};\n\tmargin-right: 5px;\n`;\n\nexport function User({ displayName, color }: { displayName: string, color: string }): JSX.Element {\n\n\treturn <UserContainer color={color}>\n\t\t{displayName}:\n\t</UserContainer>;\n}","import { PrivmsgMessage } from \"dank-twitch-irc\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { User } from \"./User\";\n\nconst MessageContainer = styled.div`\n\tmargin: 5px 0;\n\tdisplay: flex;\n\talign-items: center;\n`;\n\nconst Emote = styled.img`\n\tmargin: 3px;\n`;\n\nexport function Message({ message }: { message: PrivmsgMessage }): JSX.Element {\n\n\tconst renderMessage = [];\n\n\tlet replaced;\n\tlet buffer = \"\";\n\n\tfor (let x = 0; x <= message.messageText.length; x++) {\n\t\tconst c = message.messageText[x];\n\n\t\treplaced = false;\n\t\tfor (const emote of message.emotes) {\n\t\t\tif (emote.startIndex === x) {\n\t\t\t\treplaced = true;\n\t\t\t\trenderMessage.push(<Emote\n\t\t\t\t\tkey={x}\n\t\t\t\t\talt={emote.code}\n\t\t\t\t\tsrc={`https://static-cdn.jtvnw.net/emoticons/v1/${emote.id}/1.0`}\n\t\t\t\t/>);\n\t\t\t\tx += emote.endIndex - emote.startIndex - 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!replaced) {\n\t\t\tif (c !== \" \" && x !== message.messageText.length - 1) {\n\t\t\t\tbuffer += c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\trenderMessage.push(buffer);\n\t\t\tbuffer = \"\";\n\t\t\trenderMessage.push(c);\n\t\t}\n\t}\n\n\treturn <MessageContainer>\n\t\t<User displayName={message.displayName} color={message.colorRaw}/> {renderMessage}\n\t</MessageContainer>;\n}","import { PrivmsgMessage } from \"dank-twitch-irc\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { useChat } from \"../chat/useChat\";\nimport { colors } from \"../variables/colors\";\nimport { Message } from \"./Message\";\n\nconst TabContainer = styled.div`\n\tflex-grow: 1;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst SplitContainer = styled.div`\n    flex-grow: 1;\n    flex-basis: 0;\n    height: 0;\n    min-height: 0;\n    padding: 5px;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst Container = styled.div`\n\tbackground: ${colors.bg};\n    color: white;\n\tborder: 1px solid black;\n\tpadding: 10px;\n    display: flex;\n    flex-direction: column-reverse;\n    height: 100%;\n`;\n\nconst MessageScroll = styled.ul`\n    list-style-type: none;\n    flex-grow: 1;\n\toverflow-y: scroll;\n\toverflow-x: hidden;\n\tdisplay: flex;\n\tflex-direction: column-reverse;\n\n\t&::-webkit-scrollbar {\n\t\twidth: 5px;\n\t}\n\t\n\t&::-webkit-scrollbar-track {\n\t\tbackground: transparent;\n\t}\n\n\t&::-webkit-scrollbar-thumb {\n\t\tbackground-color: ${colors.bgDark};\n\t\tborder-radius: 10px;\n\t}\n`;\n\nexport function ChatWindow(props: { channel: string }): JSX.Element {\n\tconst messages = useChat(props.channel);\n\n\treturn <TabContainer>\n\t\t<SplitContainer>\n\t\t\t<Container>\n\t\t\t\t<MessageScroll>\n\t\t\t\t\t{messages.map((message: PrivmsgMessage) => <li key={message.messageID}><Message message={message} /></li>)}\n\t\t\t\t</MessageScroll>\n\t\t\t</Container>\n\t\t</SplitContainer>\n\t</TabContainer>;\n}","import { PrivmsgMessage } from \"dank-twitch-irc\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useStore } from \"../state/useStore\";\n\nexport function useChat(channel: string, bufferSize = 500): Array<PrivmsgMessage> {\n\tconst { chatClient } = useStore();\n\n\tconst [messages, setMessages] = useState<Array<PrivmsgMessage>>([]);\n\n\tconst handleMessage =  useCallback((message: PrivmsgMessage) => {\n\t\tif (message.channelName === channel) {\n\t\t\tconst newMessages = [...messages];\n\t\t\tif ((newMessages.length + 1) === bufferSize) {\n\t\t\t\tnewMessages.pop();\n\t\t\t}\n\t\t\tnewMessages.unshift(message);\n\n\t\t\tsetMessages(newMessages);\n\t\t}\n\t}, [bufferSize, channel, messages]);\n\n\tuseEffect((): () => void => {\n\t\tchatClient.join(channel);\n\t\tchatClient.on(\"PRIVMSG\", handleMessage);\n\n\t\treturn () => chatClient.removeListener(\"PRIVMSG\", handleMessage);\n\t}, [channel, chatClient, bufferSize, handleMessage]);\n\n\treturn messages;\n}","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst MenuContainer = styled.div`\n    display: flex;\n    width: 100%;\n    height: 2rem;\n`;\n\nexport function Menu(): JSX.Element {\n\treturn <MenuContainer>\n        Settings\n\t</MenuContainer>;\n}","import \"react-mosaic-component/react-mosaic-component.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Mosaic } from \"react-mosaic-component\";\nimport styled from \"styled-components\";\nimport { ChatWindow } from \"./layout/ChatWindow\";\nimport { Menu } from \"./layout/Menu\";\nimport { store } from \"./state/Store\";\nimport { Classes } from \"@blueprintjs/core/lib/esm/common\";\n\nconst ELEMENT_MAP: { [viewId: string]: JSX.Element } = {\n\ta: <ChatWindow channel={\"nymn\"} />,\n\tb: <ChatWindow channel={\"pokimane\"} />,\n\tc: <ChatWindow channel={\"gempir\"} />,\n};\n\nconst AppContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n\n\t.mosaic-tile {\n\t\tmargin: 0;\n\t}\n`;\n\nexport function App(): JSX.Element {\n\tconst { state } = useContext(store);\n\n\tuseEffect(() => {\n\t\tstate.chatClient.connect();\n\t}, [state.chatClient]);\n\n\treturn (\n\t\t<AppContainer>\n\t\t\t<Menu />\n\t\t\t<Mosaic<string>\n\t\t\t\tclassName={`mosaic-blueprint-theme ${Classes.DARK}`}\n\t\t\t\trenderTile={(id) => ELEMENT_MAP[id]}\n\t\t\t\tinitialValue={{\n\t\t\t\t\tdirection: \"row\",\n\t\t\t\t\tfirst: \"a\",\n\t\t\t\t\tsecond: {\n\t\t\t\t\t\tdirection: \"column\",\n\t\t\t\t\t\tfirst: \"b\",\n\t\t\t\t\t\tsecond: \"c\",\n\t\t\t\t\t},\n\t\t\t\t\tsplitPercentage: 40,\n\t\t\t\t}}\n\t\t\t/>\n\t\t</AppContainer>\n\t);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {App} from \"./App\";\nimport { StateProvider } from \"./state/Store\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<StateProvider>\n\t\t\t<App />\n\t\t</StateProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}